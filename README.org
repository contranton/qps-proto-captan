#+title: QPS Prototype design for CAPTAN+ w/ADS9813EVM

* Quick-start

Navigate to =fw= and source =runme.sh=. This will create the Vivado project directly under the =fw= directory.

* Info summary

| Target device      | xc7a200tffg1156-2 |
| Main clock         | 150MHz            |
| ADC Sampling clock | 4MHz              |
| Sampling Rate      | 1MSps             |

* Description

The design connects two principal subsystems: the ADS9813EVM evaluation board, and the GEL ethernet board. The SPI programming of the ADCs is currently handled via a Microblaze core via the provided code in =sw=. Later, this will be ported to HDL to save up on resources.

Incoming ADC data is in double data rate (DDR) but initial tests showed that the provided data clock was slightly out of sync with the actual data. Thus, this data clock passes through a PLL with programmable phase shift which ensures data is read cleanly. Currently, this phase shift is hard-coded to -15\deg and executed by the Microblaze, but soon the =adc_autoalign= module will handle this automatically.

The main clock is 150MHz sourced from the =USER_CLK1= clock generated by a Si570 chip. This powers the Microblaze and main DSP logic.
The Ethernet interface requires that the PHY's 125MHz RX_CLK be used for all its logic.

The complete flow is:

1. ADC is initialized by Microblaze
2. Data clock PLL's phase is programmed by Microblaze to a known-good value
2. Data stream is deserialized in FPGA
3. Deserialized data is sequenced and serialized as 24-bit words
4. Data is timestamped and fed to the GEL's "burst mode" input

Once running, otsdaq should be able to recognize the board with IP =192.168.133.7= and interface port =2007=. Using the =FEOtsUDPTemplateInterface= installed by =otsdaq-demo= with the =first_demo= dataset is sufficient to get a working data stream, but further customization is needed in otsdaq to interpret the data (WIP in <TBD> repository).

* Detailed operation instructions for debugging

** Environment Setup

*** Install Vitis + Vivado

TODO

** Compile

Only necessary if not using pre-built binaries.

*** Firmware compilation

*** Microblaze Software compilation

** Program

** Notes on DDR alignment routine

This version of the design doesn't have autoalignment built-in yet. Therefore, there's a bit of an awkward procedure needed to get the correct data out of the system.

The following diagram explains how the DDR can become misaligned.

#+begin_src mermaid :file ~/.tmp/tmp.png
stateDiagram-v2
    state "FPGA Off" as s0
    state "FPGA Uninitialized" as s1
    state "FPGA programmed" as s2
    state "DDR aligned" as ddr_good
    state "DDR unaligned" as ddr_bad
    %% state "UDP Stream" as udp
    [*] --> s0
    s0 --> s1 : Power on
    s1 --> s2 : Download Bitstream
    s2 --> ddr_bad
    ddr_bad --> ddr_good : Run Alignment
    ddr_good --> s1 : Reset FPGA
    ddr_good --> ddr_good : Reset Microblaze
    %% s2 --> udp : Configure Ethernet
#+end_src

The `Run Alignment` task is described by the following steps:

#+begin_src mermaid
---
Title: Run alignment
---
flowchart TB

    subgraph compile_debug [Debug Microblaze]
        direction LR
        B[Compile Application]
        B --> C[Debug NO RESET]
        C --> D[Run processor]
    end
    A[Define DO_PHASE_SHIFT and set DO_TEST_PATTERN_FIXED=1]
    A --> compile_debug
    compile_debug --> E[Verify console reads 'Will phase shift']

    subgraph verify_ila [Verify ILA]
        direction LR
        s[Open Hardware Manager]
        s --> |'Debug probes not found?'| s2[Load .ltx probes]
        s --> s3
        s2 --> s3
        s3[Open ILA #3]
        s3 --> |Trigger| s4[Verify that 'f_Channelize' ports read '123456' and '789abc']
    end

    E --> verify_ila

    verify_ila --> |Fail| F[Modify Angle, or repeat debug several times. The total phase shift accumulates after each time the Microblaze runs its code.]
    F --> FF{Completely Lost?}
    FF ---> |Yes| FFF[Reset FPGA and start from the top]
    FF --> |No| H[Debug Microblaze]
    H --> verify_ila
    verify_ila --> |Pass| G[Undefine DO_PHASE_SHIFT and set DO_TEST_PATTERN_FIXED=0]
    G --> I[Debug Microblaze]
    I --> J[Configure Ethernet]
    J --> K[Data stream will have the correct data]

#+end_src
